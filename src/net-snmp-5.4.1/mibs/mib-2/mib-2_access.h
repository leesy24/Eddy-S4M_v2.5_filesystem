/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.access_functions.conf 11358 2004-10-14 12:57:34Z dts12 $
 */
#ifndef MIB-2_ACCESS_H
#define MIB-2_ACCESS_H

/** User-defined data access functions for data in table sysORTable */
/** row level accessors */
Netsnmp_First_Data_Point  sysORTable_get_first_data_point;
Netsnmp_Next_Data_Point   sysORTable_get_next_data_point;
int sysORTable_commit_row(void **my_data_context, int new_or_del);
void * sysORTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      oid *get_sysORID(void *data_context, size_t *ret_len);
      char *get_sysORDescr(void *data_context, size_t *ret_len);
      u_long *get_sysORUpTime(void *data_context, size_t *ret_len);
/** User-defined data access functions for data in table ifTable */
/** row level accessors */
Netsnmp_First_Data_Point  ifTable_get_first_data_point;
Netsnmp_Next_Data_Point   ifTable_get_next_data_point;
int ifTable_commit_row(void **my_data_context, int new_or_del);
void * ifTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_ifIndex(void *data_context, size_t *ret_len);
      char *get_ifDescr(void *data_context, size_t *ret_len);
      long *get_ifType(void *data_context, size_t *ret_len);
      long *get_ifMtu(void *data_context, size_t *ret_len);
      u_long *get_ifSpeed(void *data_context, size_t *ret_len);
      char *get_ifPhysAddress(void *data_context, size_t *ret_len);
      long *get_ifAdminStatus(void *data_context, size_t *ret_len);
      int set_ifAdminStatus(void *data_context, long *val, size_t val_len);
      long *get_ifOperStatus(void *data_context, size_t *ret_len);
      u_long *get_ifLastChange(void *data_context, size_t *ret_len);
      u_long *get_ifInOctets(void *data_context, size_t *ret_len);
      u_long *get_ifInUcastPkts(void *data_context, size_t *ret_len);
      u_long *get_ifInNUcastPkts(void *data_context, size_t *ret_len);
      u_long *get_ifInDiscards(void *data_context, size_t *ret_len);
      u_long *get_ifInErrors(void *data_context, size_t *ret_len);
      u_long *get_ifInUnknownProtos(void *data_context, size_t *ret_len);
      u_long *get_ifOutOctets(void *data_context, size_t *ret_len);
      u_long *get_ifOutUcastPkts(void *data_context, size_t *ret_len);
      u_long *get_ifOutNUcastPkts(void *data_context, size_t *ret_len);
      u_long *get_ifOutDiscards(void *data_context, size_t *ret_len);
      u_long *get_ifOutErrors(void *data_context, size_t *ret_len);
      u_long *get_ifOutQLen(void *data_context, size_t *ret_len);
      oid *get_ifSpecific(void *data_context, size_t *ret_len);
/** User-defined data access functions for data in table atTable */
/** row level accessors */
Netsnmp_First_Data_Point  atTable_get_first_data_point;
Netsnmp_Next_Data_Point   atTable_get_next_data_point;
int atTable_commit_row(void **my_data_context, int new_or_del);
void * atTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_atIfIndex(void *data_context, size_t *ret_len);
      int set_atIfIndex(void *data_context, long *val, size_t val_len);
      char *get_atPhysAddress(void *data_context, size_t *ret_len);
      int set_atPhysAddress(void *data_context, char *val, size_t val_len);
       *get_atNetAddress(void *data_context, size_t *ret_len);
      int set_atNetAddress(void *data_context,  *val, size_t val_len);
/** User-defined data access functions for data in table ipAddrTable */
/** row level accessors */
Netsnmp_First_Data_Point  ipAddrTable_get_first_data_point;
Netsnmp_Next_Data_Point   ipAddrTable_get_next_data_point;
int ipAddrTable_commit_row(void **my_data_context, int new_or_del);
void * ipAddrTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      u_long *get_ipAdEntAddr(void *data_context, size_t *ret_len);
      long *get_ipAdEntIfIndex(void *data_context, size_t *ret_len);
      u_long *get_ipAdEntNetMask(void *data_context, size_t *ret_len);
      long *get_ipAdEntBcastAddr(void *data_context, size_t *ret_len);
      long *get_ipAdEntReasmMaxSize(void *data_context, size_t *ret_len);
/** User-defined data access functions for data in table ipRouteTable */
/** row level accessors */
Netsnmp_First_Data_Point  ipRouteTable_get_first_data_point;
Netsnmp_Next_Data_Point   ipRouteTable_get_next_data_point;
int ipRouteTable_commit_row(void **my_data_context, int new_or_del);
void * ipRouteTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      u_long *get_ipRouteDest(void *data_context, size_t *ret_len);
      int set_ipRouteDest(void *data_context, u_long *val, size_t val_len);
      long *get_ipRouteIfIndex(void *data_context, size_t *ret_len);
      int set_ipRouteIfIndex(void *data_context, long *val, size_t val_len);
      long *get_ipRouteMetric1(void *data_context, size_t *ret_len);
      int set_ipRouteMetric1(void *data_context, long *val, size_t val_len);
      long *get_ipRouteMetric2(void *data_context, size_t *ret_len);
      int set_ipRouteMetric2(void *data_context, long *val, size_t val_len);
      long *get_ipRouteMetric3(void *data_context, size_t *ret_len);
      int set_ipRouteMetric3(void *data_context, long *val, size_t val_len);
      long *get_ipRouteMetric4(void *data_context, size_t *ret_len);
      int set_ipRouteMetric4(void *data_context, long *val, size_t val_len);
      u_long *get_ipRouteNextHop(void *data_context, size_t *ret_len);
      int set_ipRouteNextHop(void *data_context, u_long *val, size_t val_len);
      long *get_ipRouteType(void *data_context, size_t *ret_len);
      int set_ipRouteType(void *data_context, long *val, size_t val_len);
      long *get_ipRouteProto(void *data_context, size_t *ret_len);
      long *get_ipRouteAge(void *data_context, size_t *ret_len);
      int set_ipRouteAge(void *data_context, long *val, size_t val_len);
      u_long *get_ipRouteMask(void *data_context, size_t *ret_len);
      int set_ipRouteMask(void *data_context, u_long *val, size_t val_len);
      long *get_ipRouteMetric5(void *data_context, size_t *ret_len);
      int set_ipRouteMetric5(void *data_context, long *val, size_t val_len);
      oid *get_ipRouteInfo(void *data_context, size_t *ret_len);
/** User-defined data access functions for data in table ipNetToMediaTable */
/** row level accessors */
Netsnmp_First_Data_Point  ipNetToMediaTable_get_first_data_point;
Netsnmp_Next_Data_Point   ipNetToMediaTable_get_next_data_point;
int ipNetToMediaTable_commit_row(void **my_data_context, int new_or_del);
void * ipNetToMediaTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_ipNetToMediaIfIndex(void *data_context, size_t *ret_len);
      int set_ipNetToMediaIfIndex(void *data_context, long *val, size_t val_len);
      char *get_ipNetToMediaPhysAddress(void *data_context, size_t *ret_len);
      int set_ipNetToMediaPhysAddress(void *data_context, char *val, size_t val_len);
      u_long *get_ipNetToMediaNetAddress(void *data_context, size_t *ret_len);
      int set_ipNetToMediaNetAddress(void *data_context, u_long *val, size_t val_len);
      long *get_ipNetToMediaType(void *data_context, size_t *ret_len);
      int set_ipNetToMediaType(void *data_context, long *val, size_t val_len);
/** User-defined data access functions for data in table tcpConnTable */
/** row level accessors */
Netsnmp_First_Data_Point  tcpConnTable_get_first_data_point;
Netsnmp_Next_Data_Point   tcpConnTable_get_next_data_point;
int tcpConnTable_commit_row(void **my_data_context, int new_or_del);
void * tcpConnTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_tcpConnState(void *data_context, size_t *ret_len);
      int set_tcpConnState(void *data_context, long *val, size_t val_len);
      u_long *get_tcpConnLocalAddress(void *data_context, size_t *ret_len);
      long *get_tcpConnLocalPort(void *data_context, size_t *ret_len);
      u_long *get_tcpConnRemAddress(void *data_context, size_t *ret_len);
      long *get_tcpConnRemPort(void *data_context, size_t *ret_len);
/** User-defined data access functions for data in table udpTable */
/** row level accessors */
Netsnmp_First_Data_Point  udpTable_get_first_data_point;
Netsnmp_Next_Data_Point   udpTable_get_next_data_point;
int udpTable_commit_row(void **my_data_context, int new_or_del);
void * udpTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      u_long *get_udpLocalAddress(void *data_context, size_t *ret_len);
      long *get_udpLocalPort(void *data_context, size_t *ret_len);
/** User-defined data access functions for data in table egpNeighTable */
/** row level accessors */
Netsnmp_First_Data_Point  egpNeighTable_get_first_data_point;
Netsnmp_Next_Data_Point   egpNeighTable_get_next_data_point;
int egpNeighTable_commit_row(void **my_data_context, int new_or_del);
void * egpNeighTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_egpNeighState(void *data_context, size_t *ret_len);
      u_long *get_egpNeighAddr(void *data_context, size_t *ret_len);
      long *get_egpNeighAs(void *data_context, size_t *ret_len);
      u_long *get_egpNeighInMsgs(void *data_context, size_t *ret_len);
      u_long *get_egpNeighInErrs(void *data_context, size_t *ret_len);
      u_long *get_egpNeighOutMsgs(void *data_context, size_t *ret_len);
      u_long *get_egpNeighOutErrs(void *data_context, size_t *ret_len);
      u_long *get_egpNeighInErrMsgs(void *data_context, size_t *ret_len);
      u_long *get_egpNeighOutErrMsgs(void *data_context, size_t *ret_len);
      u_long *get_egpNeighStateUps(void *data_context, size_t *ret_len);
      u_long *get_egpNeighStateDowns(void *data_context, size_t *ret_len);
      long *get_egpNeighIntervalHello(void *data_context, size_t *ret_len);
      long *get_egpNeighIntervalPoll(void *data_context, size_t *ret_len);
      long *get_egpNeighMode(void *data_context, size_t *ret_len);
      long *get_egpNeighEventTrigger(void *data_context, size_t *ret_len);
      int set_egpNeighEventTrigger(void *data_context, long *val, size_t val_len);
/** User-defined data access functions for data in table rs232PortTable */
/** row level accessors */
Netsnmp_First_Data_Point  rs232PortTable_get_first_data_point;
Netsnmp_Next_Data_Point   rs232PortTable_get_next_data_point;
int rs232PortTable_commit_row(void **my_data_context, int new_or_del);
void * rs232PortTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_rs232PortIndex(void *data_context, size_t *ret_len);
      long *get_rs232PortType(void *data_context, size_t *ret_len);
      long *get_rs232PortInSigNumber(void *data_context, size_t *ret_len);
      long *get_rs232PortOutSigNumber(void *data_context, size_t *ret_len);
      long *get_rs232PortInSpeed(void *data_context, size_t *ret_len);
      int set_rs232PortInSpeed(void *data_context, long *val, size_t val_len);
      long *get_rs232PortOutSpeed(void *data_context, size_t *ret_len);
      int set_rs232PortOutSpeed(void *data_context, long *val, size_t val_len);
      long *get_rs232PortInFlowType(void *data_context, size_t *ret_len);
      int set_rs232PortInFlowType(void *data_context, long *val, size_t val_len);
      long *get_rs232PortOutFlowType(void *data_context, size_t *ret_len);
      int set_rs232PortOutFlowType(void *data_context, long *val, size_t val_len);
/** User-defined data access functions for data in table rs232AsyncPortTable */
/** row level accessors */
Netsnmp_First_Data_Point  rs232AsyncPortTable_get_first_data_point;
Netsnmp_Next_Data_Point   rs232AsyncPortTable_get_next_data_point;
int rs232AsyncPortTable_commit_row(void **my_data_context, int new_or_del);
void * rs232AsyncPortTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_rs232AsyncPortIndex(void *data_context, size_t *ret_len);
      long *get_rs232AsyncPortBits(void *data_context, size_t *ret_len);
      int set_rs232AsyncPortBits(void *data_context, long *val, size_t val_len);
      long *get_rs232AsyncPortStopBits(void *data_context, size_t *ret_len);
      int set_rs232AsyncPortStopBits(void *data_context, long *val, size_t val_len);
      long *get_rs232AsyncPortParity(void *data_context, size_t *ret_len);
      int set_rs232AsyncPortParity(void *data_context, long *val, size_t val_len);
      long *get_rs232AsyncPortAutobaud(void *data_context, size_t *ret_len);
      int set_rs232AsyncPortAutobaud(void *data_context, long *val, size_t val_len);
      u_long *get_rs232AsyncPortParityErrs(void *data_context, size_t *ret_len);
      u_long *get_rs232AsyncPortFramingErrs(void *data_context, size_t *ret_len);
      u_long *get_rs232AsyncPortOverrunErrs(void *data_context, size_t *ret_len);
/** User-defined data access functions for data in table rs232SyncPortTable */
/** row level accessors */
Netsnmp_First_Data_Point  rs232SyncPortTable_get_first_data_point;
Netsnmp_Next_Data_Point   rs232SyncPortTable_get_next_data_point;
int rs232SyncPortTable_commit_row(void **my_data_context, int new_or_del);
void * rs232SyncPortTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_rs232SyncPortIndex(void *data_context, size_t *ret_len);
      long *get_rs232SyncPortClockSource(void *data_context, size_t *ret_len);
      int set_rs232SyncPortClockSource(void *data_context, long *val, size_t val_len);
      u_long *get_rs232SyncPortFrameCheckErrs(void *data_context, size_t *ret_len);
      u_long *get_rs232SyncPortTransmitUnderrunErrs(void *data_context, size_t *ret_len);
      u_long *get_rs232SyncPortReceiveOverrunErrs(void *data_context, size_t *ret_len);
      u_long *get_rs232SyncPortInterruptedFrames(void *data_context, size_t *ret_len);
      u_long *get_rs232SyncPortAbortedFrames(void *data_context, size_t *ret_len);
      long *get_rs232SyncPortRole(void *data_context, size_t *ret_len);
      int set_rs232SyncPortRole(void *data_context, long *val, size_t val_len);
      long *get_rs232SyncPortEncoding(void *data_context, size_t *ret_len);
      int set_rs232SyncPortEncoding(void *data_context, long *val, size_t val_len);
      long *get_rs232SyncPortRTSControl(void *data_context, size_t *ret_len);
      int set_rs232SyncPortRTSControl(void *data_context, long *val, size_t val_len);
      long *get_rs232SyncPortRTSCTSDelay(void *data_context, size_t *ret_len);
      int set_rs232SyncPortRTSCTSDelay(void *data_context, long *val, size_t val_len);
      long *get_rs232SyncPortMode(void *data_context, size_t *ret_len);
      int set_rs232SyncPortMode(void *data_context, long *val, size_t val_len);
      long *get_rs232SyncPortIdlePattern(void *data_context, size_t *ret_len);
      int set_rs232SyncPortIdlePattern(void *data_context, long *val, size_t val_len);
      long *get_rs232SyncPortMinFlags(void *data_context, size_t *ret_len);
      int set_rs232SyncPortMinFlags(void *data_context, long *val, size_t val_len);
/** User-defined data access functions for data in table rs232InSigTable */
/** row level accessors */
Netsnmp_First_Data_Point  rs232InSigTable_get_first_data_point;
Netsnmp_Next_Data_Point   rs232InSigTable_get_next_data_point;
int rs232InSigTable_commit_row(void **my_data_context, int new_or_del);
void * rs232InSigTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_rs232InSigPortIndex(void *data_context, size_t *ret_len);
      long *get_rs232InSigName(void *data_context, size_t *ret_len);
      long *get_rs232InSigState(void *data_context, size_t *ret_len);
      u_long *get_rs232InSigChanges(void *data_context, size_t *ret_len);
/** User-defined data access functions for data in table rs232OutSigTable */
/** row level accessors */
Netsnmp_First_Data_Point  rs232OutSigTable_get_first_data_point;
Netsnmp_Next_Data_Point   rs232OutSigTable_get_next_data_point;
int rs232OutSigTable_commit_row(void **my_data_context, int new_or_del);
void * rs232OutSigTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_rs232OutSigPortIndex(void *data_context, size_t *ret_len);
      long *get_rs232OutSigName(void *data_context, size_t *ret_len);
      long *get_rs232OutSigState(void *data_context, size_t *ret_len);
      u_long *get_rs232OutSigChanges(void *data_context, size_t *ret_len);
/** User-defined data access functions for data in table ifXTable */
/** row level accessors */
Netsnmp_First_Data_Point  ifXTable_get_first_data_point;
Netsnmp_Next_Data_Point   ifXTable_get_next_data_point;
int ifXTable_commit_row(void **my_data_context, int new_or_del);
void * ifXTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      char *get_ifName(void *data_context, size_t *ret_len);
      u_long *get_ifInMulticastPkts(void *data_context, size_t *ret_len);
      u_long *get_ifInBroadcastPkts(void *data_context, size_t *ret_len);
      u_long *get_ifOutMulticastPkts(void *data_context, size_t *ret_len);
      u_long *get_ifOutBroadcastPkts(void *data_context, size_t *ret_len);
      U64 *get_ifHCInOctets(void *data_context, size_t *ret_len);
      U64 *get_ifHCInUcastPkts(void *data_context, size_t *ret_len);
      U64 *get_ifHCInMulticastPkts(void *data_context, size_t *ret_len);
      U64 *get_ifHCInBroadcastPkts(void *data_context, size_t *ret_len);
      U64 *get_ifHCOutOctets(void *data_context, size_t *ret_len);
      U64 *get_ifHCOutUcastPkts(void *data_context, size_t *ret_len);
      U64 *get_ifHCOutMulticastPkts(void *data_context, size_t *ret_len);
      U64 *get_ifHCOutBroadcastPkts(void *data_context, size_t *ret_len);
      long *get_ifLinkUpDownTrapEnable(void *data_context, size_t *ret_len);
      int set_ifLinkUpDownTrapEnable(void *data_context, long *val, size_t val_len);
      u_long *get_ifHighSpeed(void *data_context, size_t *ret_len);
      long *get_ifPromiscuousMode(void *data_context, size_t *ret_len);
      int set_ifPromiscuousMode(void *data_context, long *val, size_t val_len);
      long *get_ifConnectorPresent(void *data_context, size_t *ret_len);
      char *get_ifAlias(void *data_context, size_t *ret_len);
      int set_ifAlias(void *data_context, char *val, size_t val_len);
      u_long *get_ifCounterDiscontinuityTime(void *data_context, size_t *ret_len);
/** User-defined data access functions for data in table ifStackTable */
/** row level accessors */
Netsnmp_First_Data_Point  ifStackTable_get_first_data_point;
Netsnmp_Next_Data_Point   ifStackTable_get_next_data_point;
int ifStackTable_commit_row(void **my_data_context, int new_or_del);
void * ifStackTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_ifStackStatus(void *data_context, size_t *ret_len);
      int set_ifStackStatus(void *data_context, long *val, size_t val_len);
/** User-defined data access functions for data in table ifTestTable */
/** row level accessors */
Netsnmp_First_Data_Point  ifTestTable_get_first_data_point;
Netsnmp_Next_Data_Point   ifTestTable_get_next_data_point;
int ifTestTable_commit_row(void **my_data_context, int new_or_del);
void * ifTestTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_ifTestId(void *data_context, size_t *ret_len);
      int set_ifTestId(void *data_context, long *val, size_t val_len);
      long *get_ifTestStatus(void *data_context, size_t *ret_len);
      int set_ifTestStatus(void *data_context, long *val, size_t val_len);
      oid *get_ifTestType(void *data_context, size_t *ret_len);
      int set_ifTestType(void *data_context, oid *val, size_t val_len);
      long *get_ifTestResult(void *data_context, size_t *ret_len);
      oid *get_ifTestCode(void *data_context, size_t *ret_len);
      char *get_ifTestOwner(void *data_context, size_t *ret_len);
      int set_ifTestOwner(void *data_context, char *val, size_t val_len);
/** User-defined data access functions for data in table ifRcvAddressTable */
/** row level accessors */
Netsnmp_First_Data_Point  ifRcvAddressTable_get_first_data_point;
Netsnmp_Next_Data_Point   ifRcvAddressTable_get_next_data_point;
int ifRcvAddressTable_commit_row(void **my_data_context, int new_or_del);
void * ifRcvAddressTable_create_data_context(netsnmp_variable_list *index_data, int column);

/** column accessors */
      long *get_ifRcvAddressStatus(void *data_context, size_t *ret_len);
      int set_ifRcvAddressStatus(void *data_context, long *val, size_t val_len);
      long *get_ifRcvAddressType(void *data_context, size_t *ret_len);
      int set_ifRcvAddressType(void *data_context, long *val, size_t val_len);

#endif /* MIB-2_ACCESS_H */
