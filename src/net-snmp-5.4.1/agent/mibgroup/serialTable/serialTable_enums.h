/*
 * Note: this file originally auto-generated by mib2c using
 *  : generic-table-enums.m2c 12526 2005-07-15 22:41:16Z rstory $
 *
 * $Id:$
 */
#ifndef SERIALTABLE_ENUMS_H
#define SERIALTABLE_ENUMS_H

#ifdef __cplusplus
extern "C" {
#endif

 /*
 * NOTES on enums
 * ==============
 *
 * Value Mapping
 * -------------
 * If the values for your data type don't exactly match the
 * possible values defined by the mib, you should map them
 * below. For example, a boolean flag (1/0) is usually represented
 * as a TruthValue in a MIB, which maps to the values (1/2).
 *
 */
/*************************************************************************
 *************************************************************************
 *
 * enum definitions for table serialTable
 *
 *************************************************************************
 *************************************************************************/

/*************************************************************
 * constants for enums for the MIB node
 * protocol (INTEGER / ASN_INTEGER)
 *
 * since a Textual Convention may be referenced more than once in a
 * MIB, protect againt redefinitions of the enum values.
 */
#ifndef PROTOCOL_ENUMS
#define PROTOCOL_ENUMS

#define PROTOCOL_DISABLED  0 
#define PROTOCOL_COMREDIRECT  1 
#define PROTOCOL_TCPSERVER  2 
#define PROTOCOL_TCPCLIENT  3 
#define PROTOCOL_TCPBROADCAST  4 
#define PROTOCOL_TCPMULTIPLEX  5 
#define PROTOCOL_UDPSERVER  6 
#define PROTOCOL_UDPCLIENT  7 

#endif /* PROTOCOL_ENUMS */


/*************************************************************
 * constants for enums for the MIB node
 * deviceType (INTEGER / ASN_INTEGER)
 *
 * since a Textual Convention may be referenced more than once in a
 * MIB, protect againt redefinitions of the enum values.
 */
#ifndef DEVICETYPE_ENUMS
#define DEVICETYPE_ENUMS

#define DEVICETYPE_DATA  1 
#define DEVICETYPE_MODEM  2 

#endif /* DEVICETYPE_ENUMS */


/*************************************************************
 * constants for enums for the MIB node
 * bypassEnable (TruthValue / ASN_INTEGER)
 *
 * since a Textual Convention may be referenced more than once in a
 * MIB, protect againt redefinitions of the enum values.
 */
#ifndef TRUTHVALUE_ENUMS
#define TRUTHVALUE_ENUMS

#define TRUTHVALUE_TRUE  1 
#define TRUTHVALUE_FALSE  2 

#endif /* TRUTHVALUE_ENUMS */


/*************************************************************
 * constants for enums for the MIB node
 * loginEnable (TruthValue / ASN_INTEGER)
 *
 * since a Textual Convention may be referenced more than once in a
 * MIB, protect againt redefinitions of the enum values.
 */
#ifndef TRUTHVALUE_ENUMS
#define TRUTHVALUE_ENUMS

#define TRUTHVALUE_TRUE  1 
#define TRUTHVALUE_FALSE  2 

#endif /* TRUTHVALUE_ENUMS */


/*************************************************************
 * constants for enums for the MIB node
 * connectionStatus (INTEGER / ASN_INTEGER)
 *
 * since a Textual Convention may be referenced more than once in a
 * MIB, protect againt redefinitions of the enum values.
 */
#ifndef CONNECTIONSTATUS_ENUMS
#define CONNECTIONSTATUS_ENUMS

#define CONNECTIONSTATUS_IDLE  1 
#define CONNECTIONSTATUS_CONNECTED  2 

#endif /* CONNECTIONSTATUS_ENUMS */


/*************************************************************
 * constants for enums for the MIB node
 * serialRowStatus (RowStatus / ASN_INTEGER)
 *
 * since a Textual Convention may be referenced more than once in a
 * MIB, protect againt redefinitions of the enum values.
 */
#ifndef ROWSTATUS_ENUMS
#define ROWSTATUS_ENUMS

#define ROWSTATUS_ACTIVE  1 
#define ROWSTATUS_NOTINSERVICE  2 
#define ROWSTATUS_NOTREADY  3 
#define ROWSTATUS_CREATEANDGO  4 
#define ROWSTATUS_CREATEANDWAIT  5 
#define ROWSTATUS_DESTROY  6 

#endif /* ROWSTATUS_ENUMS */




#ifdef __cplusplus
}
#endif

#endif /* SERIALTABLE_ENUMS_H */
